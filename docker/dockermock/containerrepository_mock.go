// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Scalingo/acadock-monitoring/docker (interfaces: ContainerRepository)

// Package dockermock is a generated GoMock package.
package dockermock

import (
	context "context"
	reflect "reflect"

	docker "github.com/Scalingo/acadock-monitoring/v2/docker"
	gomock "github.com/golang/mock/gomock"
)

// MockContainerRepository is a mock of ContainerRepository interface.
type MockContainerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContainerRepositoryMockRecorder
}

// MockContainerRepositoryMockRecorder is the mock recorder for MockContainerRepository.
type MockContainerRepositoryMockRecorder struct {
	mock *MockContainerRepository
}

// NewMockContainerRepository creates a new mock instance.
func NewMockContainerRepository(ctrl *gomock.Controller) *MockContainerRepository {
	mock := &MockContainerRepository{ctrl: ctrl}
	mock.recorder = &MockContainerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerRepository) EXPECT() *MockContainerRepositoryMockRecorder {
	return m.recorder
}

// RegisterToContainersStream mocks base method.
func (m *MockContainerRepository) RegisterToContainersStream(arg0 context.Context) <-chan docker.ContainerEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterToContainersStream", arg0)
	ret0, _ := ret[0].(<-chan docker.ContainerEvent)
	return ret0
}

// RegisterToContainersStream indicates an expected call of RegisterToContainersStream.
func (mr *MockContainerRepositoryMockRecorder) RegisterToContainersStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterToContainersStream", reflect.TypeOf((*MockContainerRepository)(nil).RegisterToContainersStream), arg0)
}
