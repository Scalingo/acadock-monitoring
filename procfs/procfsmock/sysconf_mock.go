// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Scalingo/acadock-monitoring/procfs (interfaces: Sysconf)

// Package procfsmock is a generated GoMock package.
package procfsmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSysconf is a mock of Sysconf interface.
type MockSysconf struct {
	ctrl     *gomock.Controller
	recorder *MockSysconfMockRecorder
}

// MockSysconfMockRecorder is the mock recorder for MockSysconf.
type MockSysconfMockRecorder struct {
	mock *MockSysconf
}

// NewMockSysconf creates a new mock instance.
func NewMockSysconf(ctrl *gomock.Controller) *MockSysconf {
	mock := &MockSysconf{ctrl: ctrl}
	mock.recorder = &MockSysconfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSysconf) EXPECT() *MockSysconfMockRecorder {
	return m.recorder
}

// ClockTick mocks base method.
func (m *MockSysconf) ClockTick() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClockTick")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClockTick indicates an expected call of ClockTick.
func (mr *MockSysconfMockRecorder) ClockTick() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClockTick", reflect.TypeOf((*MockSysconf)(nil).ClockTick))
}
