// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Scalingo/acadock-monitoring/procfs (interfaces: CPUStat)

// Package procfs is a generated GoMock package.
package procfs

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCPUStat is a mock of CPUStat interface.
type MockCPUStat struct {
	ctrl     *gomock.Controller
	recorder *MockCPUStatMockRecorder
}

// MockCPUStatMockRecorder is the mock recorder for MockCPUStat.
type MockCPUStatMockRecorder struct {
	mock *MockCPUStat
}

// NewMockCPUStat creates a new mock instance.
func NewMockCPUStat(ctrl *gomock.Controller) *MockCPUStat {
	mock := &MockCPUStat{ctrl: ctrl}
	mock.recorder = &MockCPUStatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCPUStat) EXPECT() *MockCPUStatMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockCPUStat) Read(arg0 context.Context) (CPUStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(CPUStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockCPUStatMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockCPUStat)(nil).Read), arg0)
}
